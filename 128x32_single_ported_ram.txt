LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.ALL;

ENTITY RAM128_32 IS
	PORT
	(
		address	: IN STD_LOGIC_VECTOR (6 DOWNTO 0);   --Address to read/ write ram
		clock		: IN STD_LOGIC  := '1';               --clock input for ram
		data		: IN STD_LOGIC_VECTOR (31 DOWNTO 0);  --data to be written into ram
		wren		: IN STD_LOGIC ;                      --write enable
		q		: OUT STD_LOGIC_VECTOR (31 DOWNTO 0)  --data output
	);
END RAM128_32;

ARCHITECTURE behaviour OF RAM128_32 IS

	--new type for the 128x32 ram
	TYPE RAM_ARRAY IS ARRAY (0 TO 127) OF STD_LOGIC_VECTOR (31 DOWNTO 0); 
	--ram signal declaration
	SIGNAL ram : RAM_ARRAY; 
	--register to hold the adresses
	SIGNAL address_reg : STD_LOGIC_VECTOR (6 DOWNTO 0);

--synchronous process for writing data into ram
begin 
	process(clock)
	BEGIN
		IF(RISING_EDGE(clock)) THEN 
			IF(wren = '1') THEN
				ram(to_integer(unsigned(address))) <= data;
			END IF;
--register the address for reading
			address_reg <= address;
		END IF;
	
	END PROCESS;

	q <= ram(to_integer(unsigned(address_reg)));

END behaviour;